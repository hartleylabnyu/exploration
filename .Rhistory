color1 = "#fe4a49"
color2 = "#2ab7ca"
color3 = "#fed766"
color4 = "#e6e6ea"
color5 = "#f4f4f8"
## Explo plotting theme
explo.theme <- theme(panel.background = element_rect(fill='transparent'),
axis.line = element_line(color='black'),
panel.grid.minor = element_line(color='transparent'),
axis.title.x = element_text(size=16, vjust=-.25),
axis.title.y = element_text(size=16, vjust=1),
axis.text.x = element_text(size=12, colour="black"),
axis.text.y = element_text(size=12, colour="black"),
legend.text=element_text(size=12),
legend.title = element_text(size = 14),
plot.title = element_text(size=16, face = "bold", hjust = .5),
strip.text.x = element_text(size=12),
strip.text.y = element_text(size=12, face="bold"),
strip.background = element_rect(colour= "black", fill = "transparent"))
## Import data
exploData <- read_csv(file.path(dataDir, "explo_choice_data.csv"))
demographicData <- read_csv(file.path(dataDir, "explo_demographics.csv"))
## merge choice data with demographics
exploAll <- inner_join(exploData, demographicData, by = c("subID"))
# Note:
# ageGroup3 = children, adolescents, adults
# ageGroup4 = children, adolescents, young adults, adults
#create age group variable in each data frame
demographicData <- demographicData %>%
mutate(ageGroup4 = case_when(age < 13 ~ "Children",
age > 12 & age < 18 ~ "Adolescents",
age > 18 & age < 23 ~ "Young Adults",
age > 23 ~ "Adults"),
ageGroup3 = case_when(age < 13 ~ "Children",
age > 12 & age < 18 ~ "Adolescents",
age > 18 ~"Adults"))
exploAll <- exploAll %>%
mutate(ageGroup4 = case_when(age < 13 ~ "Children",
age > 12 & age < 18 ~ "Adolescents",
age > 18 & age < 23 ~ "Young Adults",
age > 23 ~ "Adults"),
ageGroup3 = case_when(age < 13 ~ "Children",
age > 12 & age < 18 ~ "Adolescents",
age > 18 ~"Adults"))
#reorder levels of age group factors
exploAll$ageGroup3 <- factor(exploAll$ageGroup3, levels = c("Children", "Adolescents", "Adults"))
demographicData$ageGroup3 <- factor(demographicData$ageGroup3, levels = c("Children", "Adolescents", "Adults"))
exploAll$ageGroup4 <- factor(exploAll$ageGroup4, levels = c("Children", "Adolescents", "Young Adults", "Adults"))
demographicData$ageGroup4 <- factor(demographicData$ageGroup4, levels = c("Children", "Adolescents", "Young Adults", "Adults"))
ageSexPlot <- ggplot(demographicData, aes(x = trunc(age), fill=sex), color = "black") +
geom_histogram(binwidth=1, color = "black") +
theme(text=element_text(size=18)) +
scale_fill_manual(values=c(color1, color2, color3), labels = c("Female", "Male", "Non-binary"), name = "Sex") +
scale_x_continuous(breaks = seq(from=min(trunc(demographicData$age)), to=max(trunc(demographicData$age)), by=1)) +
scale_y_continuous(breaks = 0:6) +
xlab("Age") +
ylab("Number of Participants") +
explo.theme
ageSexPlot
demTable <- demographicData %>%
count(sex, ageGroup3) %>%
tidyr::spread(key = sex, value=n) %>%
mutate(NB = replace_na(NB, 0),
Total= F+M +NB)
pander(demTable)
demTable2 <- demographicData %>%
count(sex, ageGroup4) %>%
tidyr::spread(key = sex, value=n) %>%
mutate(NB = replace_na(NB, 0),
Total= F+M +NB)
pander(demTable2)
ageStats <- demographicData %>%
group_by(ageGroup3) %>%
summarize(
min_age = min(age),
max_age = max(age),
mean_age = mean(age),
sd_age = sd(age))
pander(ageStats)
ageStats2 <- demographicData %>%
group_by(ageGroup4) %>%
summarize(
min_age = min(age),
max_age = max(age),
mean_age = mean(age),
sd_age = sd(age))
pander(ageStats2)
demographicData$ageScaled <- scale_this(demographicData$age)
demographicData$IQScaled <- scale_this(demographicData$IQ)
age.IQ.lm <- lm(IQScaled ~ ageScaled, data = demographicData)
pander(age.IQ.lm)
age_IQ_plot <- ggplot(demographicData, aes(x = age, y = IQ)) +
geom_point(color = color1) +
geom_smooth(method = "lm", color = color2, fill = color2) +
xlab("Age") +
ylab("WASI Score (Full-Scale IQ)") +
explo.theme
age_IQ_plot
meanIQ <- demographicData %>%
group_by(ageGroup3) %>%
summarize(N = n(),
meanMR = mean(WASI_mrT, na.rm = T),
meanVerbal= mean(WASI_verbalT, na.rm = T),
meanIQ = mean(IQ, na.rm = T),
sdIQ = sd(IQ, na.rm = T))
pander(meanIQ)
meanIQ2 <- demographicData %>%
group_by(ageGroup4) %>%
summarize(N = n(),
meanMR = mean(WASI_mrT, na.rm = T),
meanVerbal= mean(WASI_verbalT, na.rm = T),
meanIQ = mean(IQ, na.rm = T),
sdIQ = sd(IQ, na.rm = T))
pander(meanIQ2)
#label blocks as hard or easy
blockInfo <- read_csv(file.path(dataDir, "explo_block_difficulty.csv"))
exploAll <- full_join(exploAll, blockInfo, by = c("subID", "blockID")) %>%
mutate(blockDifficulty = case_when(blockDifficulty == 0 ~ 'Easy',
blockDifficulty == 1 ~ 'Hard'))
#First, label all the novel hiding spots in each block
novelStim <- exploAll %>%
select(subID, blockID, trialID, trialStimID_1, trialStimID_2, exposureHistory_t_1, exposureHistory_t_2) %>%
pivot_longer(cols = c(trialStimID_1, trialStimID_2), names_to = "stimSide", names_prefix = "trialStimID_", values_to = "stim") %>%
pivot_longer(cols = c(exposureHistory_t_1, exposureHistory_t_2), names_to = "stimSide2", names_prefix = "exposureHistory_t_", values_to = "exposeHist") %>%
filter(stimSide == stimSide2) %>%
select(-stimSide2) %>%
filter(blockID > 1) %>%
filter(exposeHist == 0) %>%
select(subID, blockID, stim) %>%
mutate(novel = 1)
#Compute the mean exposure history for novel and non-novel options in each block
exposeHist <- exploAll %>%
select(subID, blockID, trialID, trialStimID_1, trialStimID_2, exposureHistory_t_1, exposureHistory_t_2) %>%
pivot_longer(cols = c(trialStimID_1, trialStimID_2), names_to = "stimSide", names_prefix = "trialStimID_", values_to = "stim") %>%
pivot_longer(cols = c(exposureHistory_t_1, exposureHistory_t_2), names_to = "stimSide2", names_prefix = "exposureHistory_t_", values_to = "exposeHist") %>%
filter(stimSide == stimSide2) %>%
select(-stimSide2) %>%
filter(blockID > 1)
exposeHist <- full_join(exposeHist, novelStim, by = c("subID", "blockID", "stim")) %>%
group_by(trialID, novel) %>%
summarize(meanExposeHist = mean(exposeHist),
maxExposeHist = max(exposeHist),
minExposeHist = min(exposeHist))
pander(exposeHist)
#compute reward earned
reward_earned <- exploAll %>%
group_by(subID, age, IQ, blockDifficulty) %>%
summarize(total_reward = sum(reward, na.rm = T))
#scale age and reward
reward_earned$ageScaled <- scale_this(reward_earned$age)
reward_earned$rewardScaled <- scale_this(reward_earned$total_reward)
#set sum contrasts
options(contrasts = rep("contr.sum", 2))
#run model
reward.age.blockDiff.lm <- lm(rewardScaled ~ ageScaled * blockDifficulty, data = reward_earned)
pander(summary(reward.age.blockDiff.lm))
# main effect of age
# no effect of block difficulty
# no age x difficulty interaction effect
#filter IQ
reward_earned_IQ <- reward_earned %>%
filter(IQ > 0)
#scale variables
reward_earned_IQ$ageScaled <- scale_this(reward_earned_IQ$age)
reward_earned_IQ$reward_scaled <- scale_this(reward_earned_IQ$total_reward)
reward_earned_IQ$IQScaled <- scale_this(reward_earned_IQ$IQ)
reward.age.IQ.lm <- lm(reward_scaled ~ ageScaled * IQScaled * blockDifficulty, data = reward_earned_IQ)
#show results
pander(reward.age.IQ.lm)
# main effect of age
# main effect of IQ
# no other sig. effects / interactions
reward_earned_total <- reward_earned %>%
group_by(subID, age, blockDifficulty) %>%
summarize(total_reward = sum(total_reward))
#plot
reward_age_plot <- ggplot(reward_earned_total, aes(x = age, y = total_reward, color = blockDifficulty, fill = blockDifficulty)) +
geom_point() +
geom_smooth(method = "lm") +
scale_color_manual(values = c(color1, color2), name = "Block Difficulty", labels = c("Easy", "Hard")) +
scale_fill_manual(values = c(color1, color2), name = "Block Difficulty", labels = c("Easy", "Hard")) +
xlab("Age") +
ylab("Total Reward Earned") +
geom_hline(yintercept = 37.5, linetype = "dashed") +
explo.theme
reward_age_plot
#add the high, med, low stim reward numbers to the data frame
reward_dist <- exploAll %>%
select(subID, blockID, reward_probs_1:reward_probs_12) %>%
unique() %>%
pivot_longer(cols = c(reward_probs_1:reward_probs_12),
names_to = "stimNum",
values_to = "winProb",
names_prefix = "reward_probs_") %>%
group_by(subID, blockID) %>%
filter(winProb > 0) %>%
mutate(stimRanking = 4-rank(winProb))
high_rew_stim <- reward_dist %>%
filter(stimRanking == 1) %>%
mutate(highRewStimNum = stimNum,
highRewWinProb = winProb) %>%
select(-c(stimNum, winProb, stimRanking))
med_rew_stim <- reward_dist %>%
filter(stimRanking == 2) %>%
mutate(medRewStimNum = stimNum,
medRewWinProb = winProb) %>%
select(-c(stimNum, winProb, stimRanking))
low_rew_stim <- reward_dist %>%
filter(stimRanking == 3) %>%
mutate(lowRewStimNum = stimNum,
lowRewWinProb = winProb) %>%
select(-c(stimNum, winProb, stimRanking))
stimRewardInfo <- high_rew_stim %>%
full_join(med_rew_stim, by = c("subID", "blockID")) %>%
full_join(low_rew_stim, by = c("subID", "blockID"))
processedData <- exploAll %>%
select(subID, blockID, trialID, selectedStimID, rejectedStimID, RT, reward, numBlockStims) %>%
mutate(selectedStimID = as.numeric(selectedStimID),
rejectedStimID = as.numeric(rejectedStimID))
processedData <- processedData %>%
full_join(stimRewardInfo, by = c("subID", "blockID")) %>%
full_join(novelStim, by = c("subID", "blockID")) %>%
rename(novelStimNum = stim) %>%
select(-novel)
choice_type <- processedData %>%
mutate(reward_chosen = case_when(selectedStimID == highRewStimNum ~ "high",
selectedStimID == medRewStimNum ~ "med",
selectedStimID == lowRewStimNum ~ "low"),
reward_rejected =  case_when(rejectedStimID == highRewStimNum ~ "high",
rejectedStimID == medRewStimNum ~ "med",
rejectedStimID == lowRewStimNum ~ "low"),
novel_chosen = case_when(selectedStimID == novelStimNum ~ 1,
selectedStimID != novelStimNum ~ 0))
# get sub demographic info
ageData <- demographicData %>%
select(subID, age, ageGroup3, ageGroup4, IQ)
#add age group
choice_type <- full_join(choice_type, ageData, by = c("subID"))
choice_type$reward_chosen <- factor(choice_type$reward_chosen, levels = c("low", "med", "high"))
#compute counts
rewardSubCounts <- choice_type %>%
group_by(subID, age, ageGroup3, reward_chosen) %>%
drop_na() %>%
summarize(N = n()) %>%
ungroup() %>%
group_by(subID) %>%
mutate(prop = N / sum(N))
rewardCounts <- rewardSubCounts %>%
group_by(ageGroup3, reward_chosen) %>%
summarize(meanProp = mean(prop, na.rm = T),
seProp = se(prop))
#plot
choiceCountsPlot <- ggplot(rewardCounts, aes(x = reward_chosen, fill = ageGroup3, y = meanProp)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_errorbar(width = .1, position = position_dodge(width = .9), aes(ymin = meanProp - seProp, ymax = meanProp + seProp)) +
scale_fill_manual(values = c(color1, color2, color3, color4), name = "Age Group") +
scale_x_discrete(labels = c("Low", "Medium", "High")) +
xlab("Value of Selected Option") +
ylab("Proportion of Choices") +
theme_classic()
choiceCountsPlot
#determine whether the participant made the optimal choice on each trial
opt_choices <- choice_type %>%
mutate(opt_choice = case_when(reward_chosen == "high" ~ 1,
reward_chosen == "med" & reward_rejected == "low" ~ 1,
reward_chosen == "med" & reward_rejected == "high" ~ 0,
reward_chosen == "low" ~ 0)) %>%
full_join(blockInfo, by = c("subID", "blockID")) %>%
mutate(blockDifficulty = factor(blockDifficulty)) %>%
drop_na()
#scale variables
opt_choices$ageScaled <- scale_this(opt_choices$age)
opt_choices$trialScaled <- scale_this(opt_choices$trialID)
optChoice.age.model <- mixed(opt_choice ~ ageScaled * blockDifficulty * trialScaled +
(blockDifficulty + trialScaled | subID),
data = opt_choices,
family = "binomial",
method = "LRT",
control = glmerControl(optimizer = "bobyqa"),
expand_re = T)
#show results
optChoice.age.model
#Note: singular fit w/ interaction in RE
#main effect of age
#main effect of block difficulty
#main effect of trial
exploAll$ageScaled <- scale_this(exploAll$age)
RT.age.lm <- lm(RT ~ ageScaled, data = exploAll)
pander(RT.age.lm)
#main effect of age
exploAll_IQ <- exploAll %>%
filter(IQ > 0)
exploAll_IQ$ageScaled <- scale_this(exploAll_IQ$age)
exploAll_IQ$IQScaled <- scale_this(exploAll_IQ$IQ)
RT.age.IQ.lm <- lm(RT ~ ageScaled * IQScaled, data = exploAll_IQ)
pander(RT.age.IQ.lm)
# main effect of age
# main effect of IQ
# age x IQ interaction
mean_RTs <- exploAll %>%
group_by(subID, age) %>%
summarize(mean_RT = mean(RT, na.rm = T))
#plot
RT_age_plot <- ggplot(mean_RTs, aes(x = age, y = mean_RT)) +
geom_point(color = color1) +
geom_smooth(method = "lm", color = color2, fill = color2) +
xlab("Age") +
ylab("Mean Reaction Time (seconds)") +
explo.theme
RT_age_plot
#Note:
# Variables post-ended with _1 = left option
# Variables post-ended with _2 = right option
#compute value, uncertainty, and novelty for each trial
data.all <- exploAll
data.all$subID = as.factor(data.all$subID)
# compute expected value and variance of the LEFT option
betaA = data.all$winHistory_b_1+1
betaB = data.all$lossHistory_b_1+1
data.all$ev_1 = betaA / (betaA + betaB) #number of wins / number of wins + number of losses
data.all$var_1 = (betaA*betaB)/((betaA+betaB)^2 * (betaA+betaB+1)) #variance
# compute expected value of the RIGHT option according to a beta distribution
betaA = data.all$winHistory_b_2+1
betaB = data.all$lossHistory_b_2+1
data.all$ev_2 = betaA / (betaA + betaB)
data.all$var_2 = (betaA*betaB)/((betaA+betaB)^2 * (betaA+betaB+1))
# feed exposure in as alpha in a beta distribution to compute novelty on the same scale as uncertainty
betaA = data.all$exposureHistory_t_1+1
betaB = 1
data.all$novel_1 = (betaA*betaB)/( (betaA+betaB)^2 * (betaA+betaB+1)) #get variance in exposure
# for the RIGHT option
betaA = data.all$exposureHistory_t_2+1
betaB = 1
data.all$novel_2 = (betaA*betaB)/((betaA+betaB)^2 * (betaA+betaB+1)) #with repeated exposure, variance of beta distribution will decrease
feature.age.model.RT <- mixed(RT ~
evDiffScaled +
varDiffScaled +
novelDiffScaled +
evDiffScaled:ageScaled +
varDiffScaled:ageScaled +
novelDiffScaled:ageScaled +
(evDiffScaled + varDiffScaled + novelDiffScaled | subID),
data.model,
method = "S",
control = glmerControl(optimizer = "bobyqa"),
expand_re = T)
feature.age.model.RT
data.model
data.model <- data.all %>%
filter(!is.na(selectedStimID)) %>% #exclude trials where they did not make a choice
select(subID,
trialID,
numBlockStims,
trialStimID_1,
trialStimID_2,
selectedStimID,
ev_1,
ev_2,
var_1,
var_2,
novel_1,
novel_2,
age,
ageGroup3,
ageGroup4,
IQ,
RT)
data.model$RT
feature.age.model.RT <- mixed(RT ~
evDiffScaled +
varDiffScaled +
novelDiffScaled +
evDiffScaled:ageScaled +
varDiffScaled:ageScaled +
novelDiffScaled:ageScaled +
(evDiffScaled + varDiffScaled + novelDiffScaled | subID),
data.model,
method = "S",
control = glmerControl(optimizer = "bobyqa"),
expand_re = T)
feature.age.model.RT
data.model$RT
data.model$evDiffScaled
# probe predictors of choice (left vs right)
data.model <- data.all %>%
filter(!is.na(selectedStimID)) %>% #exclude trials where they did not make a choice
select(subID,
trialID,
numBlockStims,
trialStimID_1,
trialStimID_2,
selectedStimID,
ev_1,
ev_2,
var_1,
var_2,
novel_1,
novel_2,
age,
ageGroup3,
ageGroup4,
IQ,
RT)
# compute difference in left - right option feature values
data.model$evDiff = data.model$ev_1 - data.model$ev_2
data.model$varDiff = data.model$var_1 - data.model$var_2
data.model$novelDiff = data.model$novel_1 - data.model$novel_2
# compute difference in more uncertain vs. less uncertain expected values
# compute difference in more novel vs. more familiar expected values
data.model <- data.model %>%
mutate(evUncertainDiff = case_when(var_1 > var_2 ~ ev_1 - ev_2,
var_1 < var_2 ~ ev_2 - ev_1),
evNovelDiff = case_when(novel_1 > novel_2 ~ ev_1 - ev_2,
novel_1 < novel_2 ~ ev_2 - ev_1))
# determine which option was selected
data.model <- data.model %>%
mutate(leftChoice = case_when(selectedStimID == trialStimID_1 ~ 1,
selectedStimID == trialStimID_2 ~ 0),
uncertainChoice = case_when(var_1 > var_2 & leftChoice == 1 ~ 1,
var_1 > var_2 & leftChoice == 0 ~ 0,
var_1 < var_2 & leftChoice == 1 ~ 0,
var_1 < var_2 & leftChoice == 0 ~ 1),
novelChoice  = case_when(novel_1 > novel_2 & leftChoice == 1 ~ 1,
novel_1 > novel_2 & leftChoice == 0 ~ 0,
novel_1 < novel_2 & leftChoice == 1 ~ 0,
novel_1 < novel_2 & leftChoice == 0 ~ 1),
valuableChoice = case_when( ev_1 > ev_2 & leftChoice == 1 ~ 1,
ev_1 > ev_2 & leftChoice == 0 ~ 0,
ev_1 < ev_2 & leftChoice == 1 ~ 0,
ev_1 < ev_2 & leftChoice == 0 ~ 1))
#scale feature values
data.model$evDiffScaled = scale_this(data.model$evDiff)
data.model$varDiffScaled = scale_this(data.model$varDiff)
data.model$novelDiffScaled = scale_this(data.model$novelDiff)
# scale number of stimuli, and trial number
data.model$scaledNumBlockStims = scale_this(data.model$numBlockStims)
data.model$scaledTrialNum = scale_this(data.model$trialID)
data.model$ageScaled <- scale_this(data.model$age)
data.model$evDiffScaled
feature.age.model.RT <- mixed(RT ~
evDiffScaled +
varDiffScaled +
novelDiffScaled +
evDiffScaled:ageScaled +
varDiffScaled:ageScaled +
novelDiffScaled:ageScaled +
(evDiffScaled + varDiffScaled + novelDiffScaled | subID),
data.model,
method = "S",
control = glmerControl(optimizer = "bobyqa"),
expand_re = T)
feature.age.model.RT
feature.age.model.RT <- mixed(RT ~
evDiffScaled +
varDiffScaled +
novelDiffScaled +
evDiffScaled:ageScaled +
varDiffScaled:ageScaled +
novelDiffScaled:ageScaled +
(evDiffScaled + varDiffScaled + novelDiffScaled | subID),
data.model,
method = "S",
control = lmerControl(optimizer = "bobyqa"),
expand_re = T)
feature.age.model.RT
hist(data.model$RT)
#log scale RT
data.model$logRT <- log(data.model$RT)
feature.age.model.RT <- mixed(logRT ~
evDiffScaled +
varDiffScaled +
novelDiffScaled +
evDiffScaled:ageScaled +
varDiffScaled:ageScaled +
novelDiffScaled:ageScaled +
(evDiffScaled + varDiffScaled + novelDiffScaled | subID),
data.model,
method = "S",
control = lmerControl(optimizer = "bobyqa"),
expand_re = T)
feature.age.model.RT
#log scale RT
data.model$logRT <- log(data.model$RT)
feature.age.model.RT <- mixed(logRT ~
evDiffScaled +
varDiffScaled +
#novelDiffScaled +
evDiffScaled:ageScaled +
varDiffScaled:ageScaled +
#novelDiffScaled:ageScaled +
(evDiffScaled + varDiffScaled | subID),
data.model,
method = "S",
control = lmerControl(optimizer = "bobyqa"),
expand_re = T)
feature.age.model.RT
#log scale RT
data.model$logRT <- log(data.model$RT)
feature.age.model.RT <- mixed(logRT ~
evDiffScaled +
varDiffScaled +
novelDiffScaled +
evDiffScaled:ageScaled +
varDiffScaled:ageScaled +
novelDiffScaled:ageScaled +
(evDiffScaled + varDiffScaled + novelDiffScaled | subID),
data.model,
method = "S",
control = lmerControl(optimizer = "bobyqa"),
expand_re = T)
feature.age.model.RT
feature.age.model.RT
